plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "4.0.0.2929"
	id 'jacoco'
	id 'idea'
}

ext {
	set('junit', "4.13.1")
	set('jjwt', "0.11.5")
	set('springdoc', "2.8.4")
	set('mapstruct', "1.5.5.Final")
	set('mapstructBinding', "0.2.0")
	set('feing', "3.1.0")
}

group = 'br.com.foursales'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'


	// Autenticação JWT
	implementation "io.jsonwebtoken:jjwt-api:${jjwt}"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwt}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwt}"

	// Swagger
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdoc}"

	// Feign Client para comunicação entre microsserviços
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${feing}"

	// Banco de Dados MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	// Kafka
	implementation 'org.springframework.kafka:spring-kafka'

	// Elasticsearch
//	implementation 'org.springframework.data:spring-data-elasticsearch:4.4.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
//	implementation 'co.elastic.clients:elasticsearch-java:7.17.0'
	implementation 'co.elastic.clients:elasticsearch-java:8.15.0'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MapStruct para mapeamento de DTOs
	implementation "org.mapstruct:mapstruct:${mapstruct}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${mapstructBinding}"

	// Testes
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation "junit:junit:${junit}"
}

test {
	systemProperty "user.language", "en"
	systemProperty "user.country", "US"
	useJUnitPlatform()
}

def jacocoExclusion = [
		'**/annotation/**',
		'**/swagger/**',
		'**/config/**',
		'**/entity/**',
		'**/exception/**',
		'**/mapper/**',
		'**/model/**',
		'**/repository/**',
		'**/enums/**',
		'**/kafka/payload/**',
		'**/Application.java',
		'src/test/java/**'
]

jacocoTestReport {
	dependsOn(test)

	getExecutionData()
			.setFrom(fileTree(buildDir)
					.include("/jacoco/test.exec")
			)

	reports {
		xml.required.set(true)
		html.required.set(true)
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExclusion)
		}))
	}
}

check {
	dependsOn jacocoTestCoverageVerification
}

project.tasks["sonarqube"].dependsOn("jacocoTestReport")

sonarqube {
	properties {
		property "sonar.tests", "src/test/java"
		property "sonar.exclusions", jacocoExclusion.join(",")
	}
}

tasks.withType(Test) {
	reports {
		junitXml.required.set(true)
		html.required.set(true)
	}
	useJUnitPlatform()
	systemProperty "user.language", "en"
	systemProperty "user.country", "US"
}
